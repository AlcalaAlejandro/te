module ietf-te {

    namespace "urn:ietf:params:xml:ns:yang:ietf-te";

    /* Replace with IANA when assigned */
    prefix "te";

    /* Import TE generic types */
    import ietf-te-types {
        prefix ietf-te-types;
    }

    /* Import TE packet specific types */
    import ietf-te-psc-types {
        prefix ietf-te-psc-types;
    }

    import ietf-interfaces {
        prefix if;
    }

    import ietf-inet-types {
        prefix inet;
    }

    import ietf-yang-types {
        prefix "yang";
    }

    organization
        "IETF TEAS Working Group";

    contact
        "Fill me";

    description
        "YANG data module for TE configuration,
         state, RPC and notifications.";

    revision 2015-06-08 {
        description "Updated revision.";
        reference "TBD";
    }

    /**
     * TE interface generic groupings
     */

    /**
     * TE tunnel generic groupings
     */

     grouping tunnel-properties_config {
        description
              "Configuration parameters relating to TE tunnel";
        leaf description {
            type string;
            description
                "TE tunnel description.";
        }
        leaf admin-status {
            type identityref {
                base ietf-te-types:state-type;
            }
            default ietf-te-types:state-up;
            description "TE tunnel administrative state.";
        }
        uses ietf-te-psc-types:tunnel-routing-properties;
        uses ietf-te-psc-types:tunnel-forwarding-properties;
        uses ietf-te-types:tunnel-bidir-assoc-properties;
        choice path-type {
            description
                "Describes the path type";
            case p2p {
                leaf destination {
                    type inet:ip-address;
                    description
                        "P2P tunnel destination address";
                }
                /* P2P list of path(s) */
                list primary-paths {
                    key "preference";
                    description
                        "List of primary paths for this
                         tunnel.";
                    leaf preference {
                         type uint8 {
                              range "1..255";
                         }
                         description
                            "Specifies a preference for
                             this path. The lower the
                             number higher the
                             preference";
                    }
                    uses ietf-te-types:tunnel-path-params;
                    list seondary-paths {
                        key "preference";
                        description
                            "List of secondary paths for this
                             tunnel.";
                        leaf preference {
                             type uint8 {
                                  range "1..255";
                             }
                             description
                                "Specifies a preference for
                                 this path. The lower the
                                 number higher the
                                 preference";
                        }
                        uses
                        ietf-te-types:tunnel-path-params;
                    }
                }
            }
            case p2mp {
                if-feature ietf-te-types:p2mp-te;
                list p2mp-paths {
                    key "destination";
                    description
                        "List of destinations and their
                         paths.";
                    leaf destination {
                        type inet:ip-address;
                        description
                            "P2MP destination leaf address";
                    }
                    list primary-paths {
                        key "preference";
                        description
                            "List of primary paths";
                        leaf preference {
                             type uint8 {
                                  range "1..255";
                             }
                             description
                                "Specifies a preference for
                                 this path. The lower the
                                 number higher the
                                 preference";
                        }
                        uses
                        ietf-te-types:tunnel-path-params;
                        list seondary-paths {
                            key "preference";
                            description
                                "List of secondary paths";
                            leaf preference {
                                type uint8 {
                                    range "1..255";
                                }
                                description
                                    "Specifies a preference
                                     for this path. The lower
                                     the number higher
                                     the preference";
                            }
                        uses
                        ietf-te-types:tunnel-path-params;
                        }
                    }
                }
            }
        }
     }

     grouping tunnel-properties {
        description
            "Top level grouping for tunnel properties.";
        container tunnel-properties{
            description
                "Top level container for tunnel properties";
            container config {
                description
                    "Configuration parameters relating to
                     tunnel properties";
                uses tunnel-properties_config;
            }
            container state {
                config false;
                description
                    "State information associated with tunnel
                     properties";
                uses tunnel-properties_config;
            }
        }
     }

     grouping lsp-error {
       description
         "LSP error information";
       
       leaf code {
         type uint8;
         description
           "error code";
       }
       
       leaf time {
         type yang:date-and-time;
         description
           "the timestamp error happened";
       }
       
       leaf node-addr {
         type inet:ip-address;
         description
           "error node address";
       }
       
       leaf flag {
         type uint8;
         description
           "error flag";
       }
       
       leaf value {
         type uint16;
         description
           "error value";
       }
       
       leaf repeat-count {
         type uint8;
         description
           "repeat count for error";
       }
     } // lsp-error

     grouping tunnel-state {
        description
            "State parameters relating to TE tunnel";
        leaf oper-status {
            type identityref {
                base ietf-te-types:state-type;
            }
            description "TE tunnel operational state.";
        }
        list lsp {
          key "ingress egress tunnel-id lsp-id";
          description "List of LSPs associated with the tunnel.";
          
          leaf ingress {
            type leafref {
              path "../../../../lsp-state/lsp/ingress";
            }
            description "";
          }
          leaf egress {
            type leafref {
              path "../../../../lsp-state/lsp/egress";
            }
            description "";
          }
          leaf tunnel-id {
            type leafref {
              path "../../../../lsp-state/lsp/tunnel-id";
            }
            description "";
          }
          leaf lsp-id {
            type leafref {
              path "../../../../lsp-state/lsp/lsp-id";
            }
            description "";
          }
          leaf extended-tunnel-id {
            type leafref {
              path "../../../../lsp-state/lsp/extended-tunnel-id";
            }
            description
              "Extended Tunnel ID of the LSP.";
          }
        }
     }

     grouping lsp-state {
        description
            "State parameters relating to LSP";
        leaf oper-status {
            type identityref {
                base ietf-te-types:state-type;
            }
            description "LSP operational state.";
        }
        leaf origin-type {
          type enumeration {
            enum "ingress" {
              description
                "ingress";
            }
          enum "egress" {
              description
                "egress";
            }
          enum "transit" {
              description
                "transit";
            }
          }
          description
            "Origin type of LSP relative to the location 
            of the local switch in the path.";
        }
		  
        leaf outgoing-interface {
          type if:interface-ref;
          description
            "outgoing interface";
        }        
        
        leaf life-time {
          type uint32;
          units seconds;
          description
            "lsp life time";
        }
        
        leaf time-to-die {
          type uint32;
          units seconds;
          description
            "lsp expire time";
        }
        
        leaf frr-tunnel-id {
          type uint32;
          description
      	    "If an LSP has an FRR bypass LSP that can protect it, 
      	     this field identifies the tunnel ID of the bypass LSP. 
      	     Otherwise, this field is empty.";
        }
  
        container bypass-info {
          description
            "bypass information";
          
          leaf bypass-flag {
            type uint8;
            description
              "bypass flag";
          }
          
          leaf bypass-frr-on {
            type uint8;
            description
              "whethere currently being bypassed";
          }
          
          leaf bypass-if-addr {
            type inet:ip-address;
            description
              "bypass if address";
          }
          
          leaf bypass-if {
            type if:interface-ref;
            description
              "bypass interface";
          }
          
          leaf bypass-nhop-if-addr {
            type inet:ip-address;
            description
              "bypass nexthop if address";
          }
        }
	
        leaf protect-type {
          type enumeration {
            enum "primary" {
              description
                "primary";
            }
            enum "backup" {
              description
                "backup";
            }
            enum "none" {
              description
                "none";
            }
            enum "bypass" {
              description
                "Is bypass LSP.";
            }
          }
          description
            "Protection characteristic of the LSP.";
        }
		  
        container downstream-info {
          description
            "downstream information";
          
          leaf nhop {
            type inet:ip-address;
            description
              "downstream nexthop.";
          }
		  
    	  leaf interface {
    	    type if:interface-ref;
            description
              "downstream interface.";
    	  }
  		  
          leaf neighbor {
            type inet:ip-address;
            description
              "downstream neighbor.";
          }
          
          leaf label {
            type uint32;
            description
              "downstream label.";
          }
        }
		  
        container upstream-info {
          description
            "upstream information";
          
          leaf nhop {
            type inet:ip-address;
            description
              "upstream nexthop.";
          }
          
          leaf interface {
            type if:interface-ref;
            description
              "upstream interface.";
          }
  		  
          leaf neighbor {
            type inet:ip-address;
            description
              "upstream neighbor.";
          }
			
          leaf label {
            type uint32;
            description
              "upstream label.";
          }
        }
		  
        leaf holding-priority {
          type uint32;
          description
            "holding priority";
        }
	
        leaf last-downstream-tx {
          type uint32;
          units seconds;
          description
            "Time of last tx downstream (sec ago)";
        }
		  
        leaf last-downstream-rx {
          type uint32;
          units seconds;
          description
            "Time of last rx downstream (sec ago)";
        }
		  
        leaf last-upstream-tx {
          type uint32;
          units seconds;
          description
            "Time of last tx upstream (sec ago)";
        }
	
        leaf last-upstream-rx {
          type uint32;
          units seconds;
          description
            "Time of last rx upstream (sec ago)";
        }
		  
        leaf next-timer-in {
          type uint32;
          units seconds;
          description
            "Time for the next time visit (sec)";
        }
  	  
        list path-err-msg {
          key "code";
          max-elements 5;
          description
            "rsvp path error message";
          
          uses lsp-error;	
        }
		  
        list resv-err-msg {
          key "code";
          max-elements 5;
          description
            "rsvp resv error message";
          
          uses lsp-error;	
        }
		  
        leaf protected-lsp-num {
          type uint32;
          description 
            "number of protected lsps";
        }
		 
        container session-attributes {
          description
            "session information";
          
          leaf node-protect-enable {
            type boolean;
            description
              "enable node protect or not";
          }
          
          leaf local-protect-enable {
            type boolean;
            description
              "enable local protect or not";
          }
          
          leaf may-reroute {
            type boolean;
            description
              "may reroute protect or not";
          }
          
          leaf record-label {
            type boolean;
            description
              "record label or not";
          }
        }
	
        container tracking-info {
    	  description
    	    "tracking information";
          
    	  leaf track-enable {
            type boolean;
            description
              "whether the lsp is tracked or not";
          }
          
    	  leaf name {
            type string;
            description
              "tracked object name";
    	  }
          
    	  leaf track-state {
            when "../track-enable = 'true'" {
              description
                "show tracking state when"
                + "tracking lsp enabled";
            }
    	    type enumeration {
              enum "up" {
                description
                "up";
              }
              enum "down" {
                description
                "down";
              }
              enum "pending" {
                description
                "pending";
              }
            }
            description
              "track state";
          }
        }
	
        container cspf-routes {
          description
            "cspf-routes information";
          
          leaf cspf-flag {
            type enumeration {
              enum "enable" {
                description
                "cspf enable";
              }
              enum "pending" {
                description
                "cspf pending";
              }
              enum "limit-exceeded" {
                description
                "cspf limit exceeded";
              }
            }
            description
              "cspf routes flag";
          }
          
          leaf route-count {
            when "../cspf-flag = 'pending'" {
              description
                "show cspf-count for pending";
            }
            type uint32;
            description
              "cspf count";			  
          }
          
          list cspf-route {
            key "id";
            description
              "cspf route information ";
            
            leaf id {
              type uint16;
              description
                "cspf route id";
            }
            
            leaf hop-num {
              type uint16;
              description
                "downstream hops to the egress node";
            }
            
            leaf-list next-hop {
              type inet:ip-prefix;
              description 
                "the router id of the next hope";
            }		  
          }
        }
        
        container record-route-information {
          description
            "recorded route information";
          
          leaf hop-num {
            type uint16;
            description
              "downstream hops to the egress node";
          }
	
          list next-hop {
            key "router-id";
            description
              "next hope router id";
            
            leaf router-id {
              type inet:ip-prefix;
              description 
                "the router id of the next hope";
            }	
    	    
            leaf protect-flag {
              type enumeration {
                enum "protect-available" {
                  description
                  "protection available";
                }
                enum "protect-in-use" {
                  description
                  "protection in use";
                }
              }
              description
                "protection flag";
            }
            
            leaf label-flag {
              type uint32;
              description
            	"label flag";
            }
            
            leaf label-id {
              type uint32;
              description
            	"label id";
            }
          }           			
        }
     }

    /**
     * TE global generic groupings
     */

    grouping named-admin-groups_config {
        description
            "Global named administrative groups configuration
             grouping";
        list named-admin-groups {
            if-feature ietf-te-types:extended-admin-groups;
            if-feature ietf-te-types:named-extended-admin-groups;
            key "name";
            description
                "List of named TE admin-groups";
            leaf name {
                type string;
                description
                    "A string name that uniquely identifies a TE
                     interface named admin-group";
            }
            leaf group {
                type ietf-te-types:admin-groups;
                description
                    "An SRLG value";
            }
        }
    }

    grouping named-admin-groups {
        description
            "Named admin groups grouping";
        container named-admin-groups {
            description
                "Named admin groups container";
            container config {
                description
                    "Configuration parameters for named admin
                     groups";
                uses named-admin-groups_config;
            }
            container state {
                config false;
                description
                    "State parameters for named admin groups";
                uses named-admin-groups_config;
            }
        }
    }

    grouping named-srlgs_config {
        description
            "Global named SRLGs configuration
             grouping";
        list named-srlgs {
            if-feature ietf-te-types:named-srlg-groups;
            key "name";
            description
                "A list of named SRLG groups";
            leaf name {
                type string;
                description
                    "A string name that uniquely identifies a TE
                     interface named srlg";
            }
            leaf group {
                type ietf-te-types:srlg;
                description "An SRLG value";
            }
        }
    }

    grouping named-srlgs {
        description
            "Global named SRLGs grouping";
        container named-srlgs {
            description
                "Named SRLGs container";
            container config {
                description
                    "Configuration parameters for named SRLG groups";
                uses named-srlgs_config;
            }
            container state {
                config false;
                description
                    "State parameters for named SRLG groups";
                uses named-srlgs_config;
            }
        }
    }

    grouping named-explicit-paths_config {
        description
            "Global explicit path configuration
             grouping";
        list named-explicit-paths {
            key "name";
            description
                "A list of explicit paths";
            leaf name {
                type string;
                description
                    "A string name that uniquely identifies an
                     explicit path";
            }
            list explicit-route-objects {
                key "index";
                description
                    "List of explicit route objects";
                leaf index {
                    type uint8 {
                         range "0..255";
                    }
                    description
                        "Index of this explicit route object";
                }
                uses ietf-te-types:explicit-route-object;
                leaf explicit-route-usage {
                    type identityref {
                        base ietf-te-types:route-usage-type;
                    }
                    description
                        "An IP hop action.";
                }
            }
        }
    }

    grouping named-explicit-paths {
        description
            "Global named explicit path grouping";
        container named-explicit-paths {
            description
                "Nmaed explicit paths container";
            container config {
                description
                    "Configuration parameters for named explicit
                     paths";
                uses named-explicit-paths_config;
            }
            container state {
                config false;
                description
                    "State parameters for named explicit paths";
                uses named-explicit-paths_config;
            }
        }
    }

    grouping named-path-constraints_config {
        description
            "Global named path constraints configuration
             grouping";
        list named-path-constraints {
            if-feature ietf-te-types:named-path-constraints;
            key "name";
            description
                "A list of named path constraints";
            leaf name {
                type string;
                description
                    "A string name that uniquely identifies a
                     path constraint set";
            }
            uses ietf-te-types:tunnel-path-selection;
        }
    }

    grouping named-path-constraints {
        description
            "Global named path constraints grouping";
        container named-path-constraints {
            description
                "Nmaed explicit paths container";
            container config {
                description
                    "Configuration parameters for named explicit
                     paths";
                uses named-path-constraints_config;
            }
            container state {
                config false;
                description
                    "State parameters for named explicit paths";
                uses named-path-constraints_config;
            }
        }
    }
    /*** End of TE global groupings ***/

    /**
     * TE configurations container
     */
    container te {
        presence "Enable TE feature.";
        description
            "TE global container.";

        /* TE Global Configuration Data */
        container globals {
            description
                "Configuration data for Global System-wide
                 Traffic Engineering.";

            uses named-admin-groups;
            uses named-srlgs;
            uses named-explicit-paths;
            uses named-path-constraints;
        }

        /* TE Interface Configuration Data */
        container interfaces {
            description
                "Configuration data model for TE interfaces.";
            list interface {
                key "interface";
                description "TE interfaces.";
                leaf interface {
                     type if:interface-ref;
                     description
                        "TE interface name.";
                }
                /* TE interface parameters */
                uses ietf-te-types:interface-te-attributes;
                /* TE interface flooding parameters */
                uses ietf-te-types:interface-te-flooding-parameters;
            }
        }

        /* TE Tunnel Configuration Data */
        container tunnels {
            description
                "Configuration, operational, notification and RPC
                 data model for TE tunnels.";

            list tunnel {
                key "name type";
                unique "identifier";
                description "TE tunnel.";
                leaf name {
                    type string;
                    description "TE tunnel name.";
                }
                leaf type {
                    type identityref {
                        base ietf-te-types:tunnel-type;
                    }
                    description "TE tunnel type.";
                }
                leaf identifier {
                    type uint16;
                    description
                        "TE tunnel Identifier.";
                }
                uses tunnel-properties;
            }
        }
        /* MPLS-TE Global Operational Data */
        container global-state {
            config "false";
            description
                "State for global TE data";
        }

        /* TE Interfaces State Data */
        container interface-state {
            config "false";
            description
                "Operational data model for TE interfaces.";
        }

        /* TE Tunnel State Data */
        container tunnels-state {
            config "false";
            description "MPLS-TE tunnel operational state data.";

            list tunnel {
                key "name type";
                unique "identifier";
                description "TE tunnel.";
                leaf name {
                    type string;
                    description "TE tunnel name.";
                }
                leaf type {
                    type identityref {
                        base ietf-te-types:tunnel-type;
                    }
                    description "TE tunnel type.";
                }
                leaf identifier {
                    type uint16;
                    description
                        "TE tunnel Identifier.";
                }
                
                uses tunnel-state;
            }
        }

        container lsp-state {
            config "false";
            description "MPLS-TE LSP operational state data.";

            list lsp {
              key 
                "ingress egress tunnel-id lsp-id extended-tunnel-id";
              description "List of LSPs associated with the tunnel.";
              
              leaf ingress {
                type inet:ip-address;
                description "";
              }
              leaf egress {
                type inet:ip-address;
                description "";
              }
              leaf tunnel-id {
                type uint16;
                description "";
              }
              leaf lsp-id {
                type uint16;
                description "";
              }
              leaf extended-tunnel-id {
                type inet:ip-address;
                description
                  "Extended Tunnel ID of the LSP.";
              }
                 
              uses lsp-state;
            }
        }
    }

    /* TE Global RPCs/execution Data */
    rpc globals-rpc {
        description
            "Execution data for TE global.";
    }

    /* TE interfaces RPCs/execution Data */
    rpc interfaces-rpc {
        description
            "Execution data for TE interfaces.";
    }

    /* TE Tunnel RPCs/execution Data */
    rpc tunnels-rpc {
	description
            "TE tunnels RPC nodes";
    }


    /* TE Global Notification Data */
    notification globals-notif {
        description
            "Notification messages for Global TE.";
    }

    /* TE Interfaces Notification Data */
    notification interfaces-notif {
        description
            "Notification messages for TE interfaces.";
    }

    /* TE Tunnel Notification Data */
    notification tunnels-notif {
        description
            "Notification messages for TE tunnels.";
    }
}
