module ietf-te {

    namespace "urn:ietf:params:xml:ns:yang:ietf-mpls-te-base";

    /* Replace with IANA when assigned */
    prefix "te";

    import ietf-te-types {
        prefix "ietf-te-types";
    }

    import ietf-interfaces {
        prefix "if";
    }

    organization
      "IETF MPLS Working Group";

    contact
      "Fill me";

    description
        "YANG data module for MPLS-TE configuration, 
         state, RPC and notifications.";

    revision 2014-12-10 {
        description
            "Initial revision.";
    }

    grouping auto-backup {
        description
            "Auto-tunnel backup properties.";
        container auto-backup {
            presence "Enable auto-tunnel backup on the node.";
            leaf method {
                description
                    "Describes whether facility backup or 1-for-1
                    backup should be used";
                type ietf-te-types:backup-type;
            }
            /* uses tunnel-template-leaf; */
            leaf protection {
                description
                    "Describes whether the backup should offer
                    protection against link, node, or either";
                type ietf-te-types:backup-protection-type;
            }
            leaf path-computation {
                 type ietf-te-types:path-computation-srlg-type;
            }
        }
    }

    grouping interface-attributes {
        leaf te-metric {
            description "Interface TE link metric.";
            type ietf-te-types:te-metric;
        }
        uses ietf-te-types:affinities;
        uses ietf-te-types:srlgs;
        uses ietf-te-types:reservable-bandwidths;
    }

    /* MPLS-TE link IGP flooding parameters */
    grouping flooding-parameters {
        description "Interface TE link flooding properties.";
        container thresholds {
            description "Flooding threshold values.";
            choice type {
                case equal-steps {
                    choice equal-step-type {
                        case up-down-different-step {
                            leaf up-step {
                                description "Set single threshold for increasing
                                             resource allocation in percent";
                                type uint8 {
                                    range "0..100";
                                }
                            }
                            leaf down-step {
                                description "Set single threshold for decreasing
                                             resource allocation in percent";
                                type uint8 {
                                    range "0..100";
                                }
                            }
                        }
                        case up-down-same-step {
                            leaf step {
                                description "Set single threshold for increasing and
                                             decreasing resource allocation in percent";
                                type uint8 {
                                    range "0..100";
                                }
                            }
                        }
                    }
                }
                case unequal-steps {
                    list up-steps {
                        key "value";
                        description "Set nultuple threshold for increasing
                                     resource allocation in percent";
                        leaf value {
                            type uint8 {
                                range "0..100";
                            }
                        }
                    }
                    list down-steps {
                        key "value";
                        description "Set nultuple threshold for decreasing 
                                     resource allocation in percent";
                        leaf value {
                             type uint8 {
                                  range "0..100";
                             }
                        }
                    }
                }
            }
        }
    }

    grouping bandwidth-constraints {
        description "Bandwidth constraints.";
        container bandwidth-constraints {
            leaf maximum-reservable {
                type uint32 {
                     range "0..4294967295";
                }
            }
            leaf-list bc-value {
                type uint32 {
                    range "0..4294967295";
                }
                max-elements 8;
            }
        }
    }
    
    grouping path-constraints {
        description
            "Grouping of possible TE path constraints";
        container path-constraints {
            uses ietf-te-types:tunnel-path-selection;
            uses ietf-te-types:tunnel-affinity;
        }
    }

    grouping fast-reroute-backups {
        container fast-reroute-backups {
            choice type {
                case static-tunnel {
                    list configured-backups {
                        key "name";
                        description "List of backup tunnels to 
                                     protect this link.";
                        leaf name {
                             type string;
                        }
                    }
                }
                case auto-tunnel {
                    uses auto-backup;
                }
            }
        }
    }

    /*** End of Groupings ***/

    container globals {
        description
            "Configuration data model for Global System-wide 
             MPLS Traffic Engineering.";
        presence "Enable MPLS-TE Global mode.";

        list interface-templates {
            description "MPLS-TE templates for interfaces.";
            key "name";
            leaf name {
                description "MPLS-TE interface template name.";
                type string;
            }
        }

        list tunnel-templates {
            description "MPLS-TE templates for tunnels.";
            key "name";
            leaf name {
                description "MPLS-TE tunnel template name.";
                type string;
            } 
        }

        list interface-named-admin-groups {
            key "name";
            leaf name {
                type string;
            }
            leaf group {
                type ietf-te-types:admin-groups;
            }
        }

        list interface-named-srlgs {
            key "name";
            leaf name {
                type string;
            }
            leaf group {
                type ietf-te-types:srlg;
            }
        }

        list explicit-paths {
            key "name";
            leaf name {
                type string;
            }
            list element-hops {
                key "index";
                leaf index {
                    type uint8 {
                         range "0..255";
                    }
                }
                uses ietf-te-types:path-element;
                leaf element-usage {
                    description
                        "An IP hop action.";
                    type ietf-te-types:path-element-usage;
                }
            }
        }
    }
 
    /* MPLS-TE Link Configuration Data */
    container interfaces {
        description
            "Configuration data model for MPLS-TE interfaces.";

        leaf interface-template {
            description
                "Name of the template to use for 
                 TE link properties.";
            type leafref {
                path "/globals/interface-templates/name";
            }
        }

        list interface {
            key "interface";
            description
                "MPLS-TE interfaces.";
            leaf interface {
                 description
                    "MPLS-TE interface name.";
                 type if:interface-ref;
            }

            leaf interface-template {
                description
                    "Name of the template to use for TE interface
                    properties.";
                type leafref {
                    path "/globals/interface-templates/name";
                }
            }

            list named-admin-groups {
                key named-admin-group;
                leaf named-admin-group {
                    type leafref {
                        path "/globals/interface-named-admin-groups/name";
                    }
                }
            }

            list named-srlgs {
                key named-srlg;
                leaf named-srlg {
                    type leafref {
                        path "/globals/interface-named-srlgs/name";
                    }
                }
            }

            uses ietf-te-types:interface-switching-cap;
            uses interface-attributes;
            /* Link IGP flooding properties */
            uses flooding-parameters;
            uses fast-reroute-backups;
        }
    }

    /* MPLS-TE Tunnel Configuration Data */
    container tunnels {
        description
            "Configuration, operational, notification and RPC data model
             for MPLS-TE tunnels.";
        presence "Enable MPLS-TE Global mode.";

        leaf tunnel-template {
            description
                "Name of the template to use for 
                 tunnel properties.";
            type leafref {
                path "/globals/tunnel-templates/name";
            }
        }

        list tunnel {
            key "name type";
            unique "identifier";
            description "MPLS-TE tunnel.";
            leaf name {
                type string;
                description "MPLS-TE tunnel name.";
            }
            leaf type {
                description "MPLS-TE tunnel type.";
                type ietf-te-types:tunnel-type;
            }
            leaf identifier {
                description
                    "MPLS-TE tunnel Identifier.";
                type uint16;
            }
            leaf description {
                description
                    "MPLS-TE tunnel description.";
                type string;
            }
            leaf admin-status {
                description "MPLS-TE tunnel administrative state.";
                type enumeration {
                     enum up;
                     enum down;
                }
                default up;
            }
            uses path-constraints;
            uses ietf-te-types:tunnel-routing-properties;
            uses ietf-te-types:tunnel-forwarding-properties;
            uses ietf-te-types:tunnel-bidir-assoc-properties;

            /* P2P list of path(s) */
            list paths {
                key "preference";
                leaf preference {
                     type uint8 {
                          range "1..255";
                     }
                }
                uses ietf-te-types:tunnel-path-properties;
            }
        }
    }
}
