module ietf-te-types {

    namespace "urn:cisco:params:xml:ns:yang:ietf-te-types";

    /* Replace with IANA when assigned */
    prefix "te-types";

    import ietf-inet-types { prefix inet; }

    organization
      "IETF TEAS Working Group";

    /* LSP attribute object to be added in the generic module types. */

    description
        "This module contains a collection of generally
         useful TE specific YANG data type defintions.";

    feature extended-admin-groups {
        description
            "Support for TE link extended admin groups.";
    }

    typedef tunnel-type {
        type enumeration {
            enum p2p {
                description
                    "TE point-to-point tunnel type.";
            }
            enum p2mp {
                description
                    "TE point-to-multipoint tunnel type.";
            }
        }
        default p2p;
        description
            "Possible TE tunnel types, default is point-to-point.";
    }

    typedef switching-capabilities {
        description
            "Switching Capabilities of an interface.";
        reference
            "RFC 5307: IS-IS Extensions in Support of Generalized
            Multi-Protocol Label Switching (GMPLS)";
        type enumeration {
            enum "PSC-1" {
                description
                  "Packet-Switch Capable-1 (PSC-1)";
                value 1;
            }
            enum "PSC-2" {
                description
                    "Packet-Switch Capable-2 (PSC-2)";
                value 2;
            }
            enum "PSC-3" {
                description
                    "Packet-Switch Capable-3 (PSC-3)";
              value 3;
            }
            enum "PSC-4" {
                description
                    "Packet-Switch Capable-4 (PSC-4)";
              value 4;
            }
            enum "L2SC" {
                description
                    "Layer-2 Switch Capable (L2SC)";
                value 51;
            }
            enum "TDM" {
                description
                    "Time-Division-Multiplex Capable (TDM)";
                value 100;
            }
            enum "OTN-TDM" {
                value 110;
                description
                    "OTN-TDM Capable";
            }
            enum "LSC" {
                description
                    "Lambda-Switch Capable (LSC)";
                value 150;
            }
            enum "FSC" {
                description
                    "Fiber-Switch Capable (FSC)";
                value 200;
            }
        }
    }

    typedef encoding-type {
        type enumeration {
            enum "not-gmpls" {
                value 0;
                description
                    "GMPLS is not in use";
            }
            enum "packet" {
                value 1;
                description "Packet";
            }
            enum "ethernet" {
                value 2;
                description "Ethernet";
            }
            enum "pdh" {
                value 3;
                description
                    "PDH";
            }
            enum "sdh-sonet" {
                value 5;
                description
                    "SDH or SONET";
            }
            enum "digital-wrapper" {
                value 7;
                description
                    "Digital Wrapper";
            }
            enum "lambda" {
                value 8;
                description
                    "Lambda";
            }
            enum "fiber" {
                value 9;
                description
                    "Fiber";
            }
            enum "fiber-channel" {
                value 11;
                description
                    "Fiber Channel";
            }
            enum "oduk" {
                value 12;
                description
                    "G.709 OKUk (Digital Path)";
            }
            enum "optical-channel" {
                value 13;
                description
                    "G.709 Optical Channel";
            }
      }
      description "Encoding type of an interface.";
      reference
        "RFC 3471: Generalized Multi-Protocol Label Switching (GMPLS)
         Signaling Functional Description.
         RFC 4328: Generalized Multi-Protocol Label Switching (GMPLS)
         Signaling Extensions for G.709 Optical Transport Networks
         Control.";
    }

    grouping explicit-route-object {
        container explicit-route-object {
            description
                "An explicit route describes as a list of groups of
                nodes along the explicit route.";
            reference "RFC3209: Extensions to RSVP for LSP Tunnels";

            choice type {
                case ipv4-address {
                    description
                        "IPv4 address Explicit Route Object";
                    leaf v4-address {
                        description
                            "An IPv4 address.  This address is treated as
                            a prefix based on the prefix length value below.
                            Bits beyond the prefix are ignored on receipt and
                            SHOULD be set to zero on transmission.";
                        type inet:ipv4-address;
                    }
                    leaf v4-prefix-length {
                        description
                            "Length in bits of the IPv4 prefix";
                        type uint8;
                    }
                    leaf v4-loose {
                        description
                            "Describes whether the object is loose if set,
                            or otherwise strict";
                        type boolean;
                    }
                }
                case ipv6-address {
                    description
                        "IPv6 address Explicit Route Object";
                    leaf v6-address {
                        description
                            "An IPv6 address.  This address is treated as
                            a prefix based on the prefix length value below.
                            Bits beyond the prefix are ignored on receipt and
                            SHOULD be set to zero on transmission.";
                        type inet:ipv6-address;
                    }
                    leaf v6-prefix-length {
                        description
                            "Length in bits of the IPv4 prefix";
                        type uint8;
                    }
                    leaf v6-loose {
                        description
                            "Describes whether the object is loose if set,
                            or otherwise strict";
                        type boolean;
                    }
                }
                case as-number {
                    description
                        "Autonomous System Explicit Route Object";
                    leaf as-number {
                        type uint16;
                    }
                }
                case unnumbered-link {
                    description
                        "Unnumbered link Explicit Route Object";
                    reference
                        "RFC3477: Signalling Unnumbered Links in RSVP-TE";
                    leaf router-id {
                        type inet:ip-address;
                    }
                    leaf interface-id {
                        type uint32;
                    }
                }
                case label {
                    description
                        "The Label ERO subobject";
                    leaf label_value {
                        type uint32;
                    }
                }
                /* AS domain sequence..? */
            }
        }
    }

    grouping record-route-object {
        container record-route-object {
            description
                "Describes a record route object";
            choice type {
                case ipv4-address {
                    leaf address {
                        description
                            "An IPv4 address.  This address is treated as
                            a prefix based on the prefix length value below.
                            Bits beyond the prefix are ignored on receipt and
                            SHOULD be set to zero on transmission.";
                        type inet:ipv4-address;
                    }
                    leaf prefix-length {
                        description
                            "Length in bits of the IPv4 prefix";
                        type uint8;
                    }
                }
                case ipv6-address {
                    leaf address {
                        description
                            "An IPv6 address.  This address is treated as
                            a prefix based on the prefix length value below.
                            Bits beyond the prefix are ignored on receipt and
                            SHOULD be set to zero on transmission.";
                        type inet:ipv6-address;
                    }
                    leaf prefix-length {
                        description
                            "Length in bits of the IPv4 prefix";
                        type uint8;
                    }
                }
                case label {
                }
            }
        }
    }

    typedef explicit-route-usage-type {
        type enumeration {
            enum include {
                description
                    "Include the explicit-route-object in the path.";
            }
            enum exclude {
                description
                    "Exclude the explicit-route-object from the path.";
            }
            enum exclude-srlg {
                description
                    "Excludes the SRLGs associated with the path";
            }
        }
        default "include";
    }

    typedef path-metric-type {
        type enumeration {
            enum igp;
            enum te;
        }
        default igp;
        description "Path metric for CSPF.";
    }

    typedef path-tiebreaker-type {
        type enumeration {
            enum min-fill;
            enum max-fill;
            enum random;
        }
        default min-fill;
        description
            "Possible CSPF path tiebreakers for TE tunnels.";
    }


    typedef bidir-provisioning {
        type enumeration {
            enum single-sided;
            enum double-sided;
        }
    }

    typedef bidir-association-type {
        type enumeration {
            enum corouted;
            enum non-corouted;
        }
        default non-corouted;
        description
            "Possible types of bidirectional tunnel association.";
    }

    typedef constraint-usage-type {
        type enumeration {
            enum include;
            enum exclude;
            enum include-strict;
            enum exclude-all;
        }
        description
            "Possible handling for affinity.";
    }

    typedef admin-group {
        description
            "Administrative group/Resource class/Color.";
        type uint32;
    }

    typedef extended-admin-group {
        description
            "Extended administrative group/Resource class/Color.";
        type binary;
    }

    typedef admin-groups {
        type union {
            type admin-group;
            type extended-admin-group;
        }
    }

    typedef srlg {
        type uin32;
    }

    typedef  path-computation-srlg-type {
        description "Path computation SRLG criteria.";
        type enumeration {
            enum srlg-none;
            enum srlg-strict;
            enum srlg-preferred;
            enum srlg-weighted;
        }
    }

    typedef te-metric {
        type uint32;
    }

    typedef topology-id {
        description
            "An identifier for a topology.";
        type string {
            pattern '/?([a-zA-Z0-9\-_.]+)(/[a-zA-Z0-9\-_.]+)*';
        }
    }

    grouping tunnel-path-selection {
        container path-selection {
            leaf topology {
                description
                    "The tunnel path is computed using the specific
                     topology identified by this identifier";
                type topology-id;
            }
            leaf cost-limit {
                description
                    "The tunnel path cost limit.";
                type uint32 {
                    range "1..4294967295";
                }
            }
            leaf hop-limit {
                description
                    "The tunnel path hop limit.";
                type uint8 {
                     range "1..255";
                }
            }
            leaf metric-type {
                description
                    "The tunnel path metric type.";
                type path-metric-type;
            }
            leaf tiebreaker-type {
                description
                    "The tunnel path computation tie breakers.";
                type path-tiebreaker-type;
            }
            leaf ignore-overload {
                description
                    "The tunnel path can traverse overloaded node.";
                type boolean;
            }
            uses path-affinities;
            uses path-srlgs;
        }
    }

    grouping path-affinities {
        container path-affinities {
            choice style {
                case values {
                    leaf value {
                        type uint32 {
                            range "0..4294967295";
                        }
                    }
                    leaf mask {
                        type uint32 {
                            range "0..4294967295";
                        }
                    }
                }
                case named {
                    list constraints {
                        key "usage";
                        leaf usage {
                             type constraint-usage-type;
                        }
                        container constraint {
                            list affinity-names {
                                key "name";
                                leaf name {
                                     type string;
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    grouping path-srlgs {
        container path-srlgs {
            choice style {
                case values {
                    leaf usage {
                        type constraint-usage-type;
                    }
                    leaf-list values {
                        type srlg;
                    }
                }
                case named {
                    list constraints {
                        key "usage";
                        leaf usage {
                            type constraint-usage-type;
                        }
                        container constraint {
                            list srlg-names {
                                key "name";
                                leaf name {
                                     type string;
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    grouping tunnel-forwarding-properties {
        description "Properties for using tunnel in forwarding.";
        container forwarding {
            leaf load-share {
                 description "ECMP tunnel forwarding
                              load-share factor.";
                 type uint32 {
                    range "1..4294967295";
                 }
            }
            choice policy-type {
                container class {
                    leaf class {
                        type uint8 {
                            range "1..7";
                        }
                    }
                }
                container group {
                    leaf-list classes {
                        type uint8 {
                            range "1..7";
                        }
                    }
                }
            }
        }
    }

    grouping tunnel-routing-properties {
        choice routing-choice {
            description
                "Announces the tunnel to IGP as either
                 autoroute or forwarding adjacency.";
            case autoroute {
                container autoroute-announce {
                    presence "Enable autoroute announce.";
                    description
                        "Announce the TE tunnel as autoroute to
                         IGP for use as IGP shortcut.";
                    leaf-list routing-afs {
                         type inet:ip-version;
                    }
                    choice metric-type {
                        leaf metric {
                            type uint32 {
                                 range "1..2147483647";
                            }
                        }
                        leaf relative-metric {
                            type int32 {
                                 range "-10..10";
                            }
                        }
                        leaf absolute-metric {
                            type uint32 {
                                 range "1..2147483647";
                            }
                        }
                    }
                }
            }
            case forwarding-adjacency {
                container forwarding-adjacency {
                    presence "Enable forwarding adjacency
                              on the tunnel.";
                    description
                        "Announce the TE tunnel
                         as forwarding adjacency.";
                    leaf holdtime {
                        description
                            "Holdtime in seconds after
                             tunnel becomes UP.";
                        type uint32 {
                             range "0..4294967295";
                        }
                    }
                    leaf-list routing-afs {
                        type inet:ip-version;
                    }
                }
            }
        }
    }

    grouping tunnel-bidir-assoc-properties {
        container bidirectional {
            description
                "TE tunnel associated bidirectional attributes.";
            container association {
                leaf id {
                     description
                         "The TE tunnel association identifier.";
                     type uint16;
                }
                leaf source {
                     description
                            "The TE tunnel association source.";
                     type inet:ip-address;
                }
                leaf global-source {
                     description
                            "The TE tunnel association global
                             source.";
                     type inet:ip-address;
                }
                leaf type {
                     description
                        "The TE tunnel association type.";
                     type bidir-association-type;
                }
                leaf provisioing {
                    description
                        "Describes the provisioning model of the associated
                        bidirection LSP";
                    reference
                        "draft-ietf-teas-mpls-tp-rsvpte-ext-associated-lsp,
                        section-3.2";
                    type bidir-provisioning;
                }
            }
        }
    }

    /* TE interface attribute properties */
    grouping interface-switching-cap {
        list switching-capabilities {
            key "switching-capability";
            description
                "List of interface capabilities for this interface";
            leaf capability {
              type te-types:switching-capabilities;
              description
                "Switching Capability for this interface";
            }
            leaf encoding {
              type encoding-type;
              description
                "Encoding supported by this interface";
            }
        }
    }

    grouping interface-affinities {
        container affinities {
            choice type {
                case admin-groups {
                    description
                        "Administrative group/Resource class/Color.";
                    leaf admin-group {
                        type admin-group;
                    }
                }
                case extended-admin-groups {
                    if-feature extended-admin-groups;
                    description
                        "Extended administrative group/Resource class/Color.";
                    leaf extended-admin-group {
                        type extended-admin-group;
                    }
                }
            }
        }
    }

    grouping interface-srlgs {
        container srlgs {
            choice type {
                case srlg-name {
                    list names {
                        key "name";
                        description "List of SRLG names that
                            this link is part of.";
                        leaf name {
                             type string;
                        }
                    }
                }
                case srlg-value {
                    list values {
                        key "value";
                        description "List of SRLG values that
                            this link is part of.";
                        leaf value {
                             type uint32 {
                                  range "0..4294967295";
                             }
                        }
                    }
                }
            }
        }
    }
}
