module ietf-mpls-static {

  namespace "urn:ietf:params:xml:ns:yang:ietf-mpls-static";

  prefix "mpls-static";

  import ietf-mpls {
    prefix mpls;
  }

  import ietf-routing {
    prefix "rt";
  }

  import ietf-inet-types {
    prefix inet;
  }

  import ietf-interfaces {
    prefix "if";
  }

  organization "TBD";

  contact "TBD";

  description
     "This YANG module augments the 'ietf-routing' module with basic
     configuration and operational state data for MPLS static";

  revision "2015-10-01" {
    description
      "Initial revision";
    reference
      "RFC 3031: A YANG Data Model for MPLS Static";
  }

  grouping path-basic_config {
    description "common definitions for statics";

    leaf next-hop {
      type inet:ip-address;
      description "next hop IP address for the LSP";
    }

    leaf outgoing-label {
      type mpls:mpls-label;
      description 
        "label value to push at the current hop for the
         LSP";
    }
  }

  grouping path-properties_config {
    description
      "MPLS path properties";
    leaf path-index {
      type uint32;
      description
        "Path identifier";
    }

    leaf backup-path-index {
      type uint32;
      description
        "Backup path identifier";
    }

    leaf next-hop {
      type inet:ip-address;
      description
        "The address of the next-hop";
    }

    leaf outgoing-interface {
      type if:interface-ref;
      description
        "The outgoing interface";
    }

    list outgoing-labels {
      key index;
      description
        "The outgoing MPLS labels to impose";
      leaf index {
        type uint32;
        description
          "The index of the label, lower indices are closer to
           the top";
      }
      leaf label {
        type mpls:mpls-label;
        description
          "The MPLS label value";
      }
    }

    leaf loadshare {
      type mpls:percent;
      description
        "The percentage of total load tto carry on this path";
    }

    leaf role {
      type enumeration {
        enum PRIMARY {
          description
            "Path as primary traffic carrying";
        }
        enum BACKUP {
          description
            "Path acts as backup";
        }
        enum PRIMARY_AND_BACKUP {
          description
            "Path acts as primary and backup simultaneously";
        }
      }
      description
        "The MPLS path role";
    }
  }

  grouping static-lsp_config {
    description "common definitions for static LSPs";

    container fec {
      description
        "Forwarding Equivalence Class";
      choice type {
        description
          "Basic FEC choice";
        case ip-prefix {
          leaf ip-prefix {
            type inet:ip-prefix;
            description "An IP prefix";
          }
        }
        case mpls-label {
          leaf label {
            type mpls:mpls-label;
            description "An MPLS label";
          }
        }
      }
    }

    leaf destination {
      type inet:ip-address;
      description
        "Static LSP destination address";
    }

    leaf incoming-label {
      type mpls:mpls-label;
      description "label value on the incoming packet";
    }

    leaf operation {
      type enumeration {
        enum impose-and-forward {
          description "";
        }
        enum pop-and-forward {
          description "";
        }
        enum pop-impose-and-forward {
          description "";
        }
        enum swap-and-forward {
          description "";
        }
        enum pop-and-lookup {
          description "";
        }
      }
      description
        "The MPLS operation to be executed on the incoming packet";
    }

    choice path-type {
      description "The MPLS path type choice";
      case simple-path {
        uses path-basic_config;
      }
      case path-list {
        list paths {
          key path-index;
          description
            "The list of MPLS paths associated with the FEC";
          uses path-properties_config;
        }
      }
    }
  }

  grouping static-lsp {
    description "grouping for top level list of static LSPs";
    container config {
      description
        "Holds the intended configuration";
      uses static-lsp_config;
    }
    container state {
      description
        "Holds the state and inuse configuration";
      uses static-lsp_config;
    }
  }

  augment "/rt:routing/rt:routing-instance/rt:routing-protocols/"+
          "rt:routing-protocol/mpls:mpls" {
    when "../../rt:type = 'mpls:mpls'" {
       description
       "This augment MPLS protocol when used";
    }
    description "Augmentations for MPLS Static LSPs";
    container static-lsps {
      description
        "Statically configured LSPs, without dynamic signaling";
      list static-lsp {
        key name;
        description "list of defined static LSPs";

        leaf name {
          type string;
          description "name to identify the LSP";
        }
        uses static-lsp;
      }
    }
  }
}
