module ietf-mpls {

  namespace "urn:ietf:params:xml:ns:yang:ietf-mpls";

  prefix "mpls";

  import ietf-routing {
    prefix "rt";
  }

  import ietf-interfaces {
    prefix "if";
  }

  import ietf-yang-types {
    prefix "yang";
  }

  import ietf-inet-types {
    prefix inet;
  }

  import ietf-te {
    prefix te;
  }

  organization "IETF MPLS Working Group";

  contact
    "WG Web:   <http://tools.ietf.org/wg/mpls/>

     WG List:  <mailto:mpls@ietf.org>

     WG Chair: Loa Andersson
               <mailto:loa@pi.nu>

     WG Chair: Ross Callon
               <mailto:rcallon@juniper.net>

     WG Chair: George Swallow
               <mailto:swallow.ietf@gmail.com>

     Editor:   Tarek Saad
               <mailto:tsaad@cisco.com>

     Editor:   Kamran Raza
               <mailto:skraza@cisco.com>

     Editor:   Rakesh Gandhi
               <mailto:rgandhi@cisco.com>

     Editor:   Xufeng Liu
               <mailto: xufeng.liu.ietf@gmail.com>

     Editor:   Vishnu Pavan Beeram
               <mailto:vbeeram@juniper.net>

     Editor:   Himanshu Shah
               <mailto:hshah@ciena.com>

     Editor:   Igor Bryskin
               <mailto: Igor.Bryskin@huawei.com>

     Editor:   Xia Chen
               <mailto:jescia.chenxia@huawei.com>

     Editor:   Raqib Jones
               <mailto:raqib@Brocade.com>

     Editor:   Bin Wen
               <mailto:Bin_Wen@cable.comcast.com>";

  description
    "This YANG module defines the essential components for the
     management of the MPLS subsystem.";

  revision "2016-07-05" {
    description
      "Latest revision:
        - Addressed MPLS-RT review comments";
    reference "RFC 3031: A YANG Data Model for base MPLS";
  }

  typedef mpls-label {
    type uint32 {
      range "0..1048575";
    }
    description
      "The MPLS label range";
  }

  typedef nhlfe-role {
    type enumeration {
      enum PRIMARY {
        description
          "Next-hop acts as primary traffic carrying";
      }
      enum BACKUP {
        description
          "Next-hop acts as backup";
      }
      enum PRIMARY_AND_BACKUP {
        description
          "Next-hop acts as primary and backup simultaneously";
      }
    }
    description "The next-hop role";
  }

  typedef label-operation {
    type enumeration {
      enum impose-and-forward {
        description
          "Operation impose outgoing label(s) and forward to
           next-hop";
      }
      enum pop-and-forward {
        description
          "Operation pop incoming label and forward to next-hop";
      }
      enum pop-impose-and-forward {
        description
          "Operation pop incoming label, impose one or more
           outgoing label(s) and forward to next-hop";
      }
      enum swap-and-forward {
        description
          "Operation swap incoming label, with outgoing label and
           forward to next-hop";
      }
      enum pop-and-lookup {
        description
          "Operation pop incoming label and perform a lookup";
      }
    }
    description
      "The MPLS operation to be executed on the incoming packet";
  }

  grouping nhlfe-contents {
    description
      "MPLS NHLFE contents";
    leaf index {
      type string;
      description
        "A user-specified identifier utilised to uniquely
         reference the next-hop entry in the next-hop list.
         The value of this index has no semantic meaning
         other than for referencing the entry.";
    }

    leaf backup-index {
      type string;
      description
        "A user-specified identifier utilised to uniquely
         reference the backup next-hop entry in the NHLFE list.
         The value of this index has no semantic meaning
         other than for referencing the entry.";
    }

    leaf next-hop {
      type inet:ip-address;
      description
        "The IP address of the next-hop";
    }

    leaf operation {
      type label-operation;
      description
        "The MPLS label operation to be executed on the incoming packet";
    }

    leaf-list labels {
      type mpls-label;
      description "The MPLS label stack";
    }

    leaf outgoing-interface {
      type if:interface-ref;
      description
        "The outgoing interface";
    }

    leaf loadshare {
      type uint16;
      description
        "This value is used to compute a loadshare to perform un-equal
         load balancing when multiple outgoing next-hop(s) are specified. A
         share is computed as a ratio of this number to the total under
         all next-hops(s).";
    }

    leaf role {
      type nhlfe-role;
      description "NHLFE role";
    }
  }

  grouping ilm-contents {
    description "ILM entry contents grouping";
    leaf label {
      type mpls-label;
      description "The ILM label";
    }
    leaf incoming-interface {
      type if:interface-ref;
      description
        "Optional incoming interface if restricted to traffic incoming
         on a specific interface";
    }
    leaf-list nhlfes {
      type leafref {
        path "../../nhlfe-table/index";
      }
      min-elements "1";
      description "The list of referenced NHLFE(s)";
    }
  }

  grouping ilm-table {
    description "The Incoming Label Map table grouping";
    list ilm-table {
      key "label";
      description "The Incoming Label Map table";
      uses ilm-contents;
      uses route-metadata;
    }
  }

  grouping fec-contents {
    description "Table of FECs";
    choice type {
      description
        "Basic FEC choice";
      case ip-prefix {
        leaf ip-prefix {
          type inet:ip-prefix;
          description "An IP prefix";
        }
      }
      case mpls-label {
        leaf incoming-label {
          type mpls-label;
          description "label value on the incoming packet";
        }
      }
      case tunnel {
        leaf tunnel {
          type te:tunnel-ref;
          description "TE tunnel FEC mapping";
        }
      }
    }

    leaf incoming-interface {
      type if:interface-ref;
      description
        "Optional incoming interface if FEC is restricted
         to traffic incoming on a specific interface";
    }
  }

  grouping nhlfe-table {
    description "NHLFE table grouping";
    list nhlfe-table {
      key index;
      description "NHLFE table";
      uses nhlfe-contents;
    }
  }

  grouping ftn-contents {
    description "The FEC-to-NHLFE entry contents";
    leaf index {
      type string;
      description
        "A user-specified identifier utilised to uniquely
         reference the backup next-hop entry in the NHLFE list.
         The value of this index has no semantic meaning
         other than for referencing the entry.";
    }
    uses fec-contents;
    leaf-list nhlfes {
      type leafref {
        path "../../nhlfe-table/index";
      }
      min-elements "1";
      description "The list of referenced NHLFE(s)";
    }
  }

  grouping ftn-table {
    description "FTN table grouping";
    list ftn-table {
      key "index";
      description
        "The MPLS Next-hop Label Forwarding Entries table";
      uses ftn-contents;
      uses route-metadata;
    }
  }

  grouping route-metadata {
    description
     "Common route metadata.";
    leaf source-protocol {
     type string;
     description
       "Type of the routing protocol from which the route
        originated.";
    }
    leaf active {
     type empty;
     description
       "Presence of this leaf indicates that the route is preferred
        among all routes in the same RIB that have the same
        destination prefix.";
    }
    leaf last-updated {
     type yang:date-and-time;
     description
       "Time stamp of the last modification of the route. If the
        route was never modified, it is the time when the route was
        inserted into the RIB.";
    }
  }

  grouping interface-mpls {
    description "MPLS interface contents grouping";
    leaf enabled {
      type boolean;
      description
        "'true' if mpls encapsulation is enabled on the
         interface. 'false' if mpls encapsulation is enabled
         on the interface.";
    }
    leaf mtu {
      type uint32;
      description
        "MPLS Maximum Transmission Unit (MTU)";
    }
  }

  grouping interfaces-mpls {
    description "List of MPLS interfaces";
    list interface {
      key "name";
      description "List of MPLS interfaces";
      leaf name {
        type if:interface-ref;
        description
          "The name of a configured MPLS interface";
      }
      uses interface-mpls;
    }
  }

  augment "/rt:routing" {
    description "MPLS augmentation.";
    container mpls {
      description
        "MPLS container, to be used as an augmentation target node
         other MPLS sub-features config, e.g. MPLS static LSP, MPLS
         LDP LSPs, and Trafic Engineering MPLS LSP Tunnels, etc.";
      uses interfaces-mpls;
    }
  }

  augment "/rt:routing-state" {
    description "MPLS augmentation.";
    container mpls {
      config false;
      description
        "MPLS container, to be used as an augmentation target node
         other MPLS sub-features state";
      uses interfaces-mpls;
      uses nhlfe-table;
      uses ilm-table;
      uses ftn-table;
    }
  }
}
